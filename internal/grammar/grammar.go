package grammar

// Code generated by peg -switch -inline -strict -output internal/grammar/grammar.go internal/grammar/grammar.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulemd
	ruleregularText
	ruleboldBlock
	ruleboldText
	rulecodeBlock
	rulecodeText
	rulebigCodeBlock
	rulebigCodeText
)

var rul3s = [...]string{
	"Unknown",
	"md",
	"regularText",
	"boldBlock",
	"boldText",
	"codeBlock",
	"codeText",
	"bigCodeBlock",
	"bigCodeText",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type AshMd struct {
	Buffer string
	buffer []rune
	rules  [9]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *AshMd) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *AshMd) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *AshMd
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *AshMd) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *AshMd) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *AshMd) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*AshMd) error {
	return func(p *AshMd) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*AshMd) error {
	return func(p *AshMd) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *AshMd) Init(options ...func(*AshMd) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 md <- <((regularText / boldBlock / codeBlock / bigCodeBlock)+ !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position4, tokenIndex4 := position, tokenIndex
					{
						position6 := position
						{
							position9, tokenIndex9 := position, tokenIndex
							{
								position10, tokenIndex10 := position, tokenIndex
								if buffer[position] != rune('*') {
									goto l11
								}
								position++
								goto l10
							l11:
								position, tokenIndex = position10, tokenIndex10
								if buffer[position] != rune('`') {
									goto l9
								}
								position++
							}
						l10:
							goto l5
						l9:
							position, tokenIndex = position9, tokenIndex9
						}
						if !matchDot() {
							goto l5
						}
					l7:
						{
							position8, tokenIndex8 := position, tokenIndex
							{
								position12, tokenIndex12 := position, tokenIndex
								{
									position13, tokenIndex13 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l14
									}
									position++
									goto l13
								l14:
									position, tokenIndex = position13, tokenIndex13
									if buffer[position] != rune('`') {
										goto l12
									}
									position++
								}
							l13:
								goto l8
							l12:
								position, tokenIndex = position12, tokenIndex12
							}
							if !matchDot() {
								goto l8
							}
							goto l7
						l8:
							position, tokenIndex = position8, tokenIndex8
						}
						add(ruleregularText, position6)
					}
					goto l4
				l5:
					position, tokenIndex = position4, tokenIndex4
					{
						position16 := position
						if buffer[position] != rune('*') {
							goto l15
						}
						position++
						{
							position17 := position
							{
								position20, tokenIndex20 := position, tokenIndex
								if buffer[position] != rune('*') {
									goto l20
								}
								position++
								goto l15
							l20:
								position, tokenIndex = position20, tokenIndex20
							}
							if !matchDot() {
								goto l15
							}
						l18:
							{
								position19, tokenIndex19 := position, tokenIndex
								{
									position21, tokenIndex21 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l21
									}
									position++
									goto l19
								l21:
									position, tokenIndex = position21, tokenIndex21
								}
								if !matchDot() {
									goto l19
								}
								goto l18
							l19:
								position, tokenIndex = position19, tokenIndex19
							}
							add(ruleboldText, position17)
						}
						if buffer[position] != rune('*') {
							goto l15
						}
						position++
						add(ruleboldBlock, position16)
					}
					goto l4
				l15:
					position, tokenIndex = position4, tokenIndex4
					{
						position23 := position
						if buffer[position] != rune('`') {
							goto l22
						}
						position++
						{
							position24 := position
							{
								position27, tokenIndex27 := position, tokenIndex
								if buffer[position] != rune('`') {
									goto l27
								}
								position++
								goto l22
							l27:
								position, tokenIndex = position27, tokenIndex27
							}
							if !matchDot() {
								goto l22
							}
						l25:
							{
								position26, tokenIndex26 := position, tokenIndex
								{
									position28, tokenIndex28 := position, tokenIndex
									if buffer[position] != rune('`') {
										goto l28
									}
									position++
									goto l26
								l28:
									position, tokenIndex = position28, tokenIndex28
								}
								if !matchDot() {
									goto l26
								}
								goto l25
							l26:
								position, tokenIndex = position26, tokenIndex26
							}
							add(rulecodeText, position24)
						}
						if buffer[position] != rune('`') {
							goto l22
						}
						position++
						add(rulecodeBlock, position23)
					}
					goto l4
				l22:
					position, tokenIndex = position4, tokenIndex4
					{
						position29 := position
						if buffer[position] != rune('`') {
							goto l0
						}
						position++
						if buffer[position] != rune('`') {
							goto l0
						}
						position++
						if buffer[position] != rune('`') {
							goto l0
						}
						position++
						{
							position30 := position
							if !matchDot() {
								goto l0
							}
							{
								position33, tokenIndex33 := position, tokenIndex
								if buffer[position] != rune('`') {
									goto l33
								}
								position++
								if buffer[position] != rune('`') {
									goto l33
								}
								position++
								if buffer[position] != rune('`') {
									goto l33
								}
								position++
								goto l0
							l33:
								position, tokenIndex = position33, tokenIndex33
							}
						l31:
							{
								position32, tokenIndex32 := position, tokenIndex
								if !matchDot() {
									goto l32
								}
								{
									position34, tokenIndex34 := position, tokenIndex
									if buffer[position] != rune('`') {
										goto l34
									}
									position++
									if buffer[position] != rune('`') {
										goto l34
									}
									position++
									if buffer[position] != rune('`') {
										goto l34
									}
									position++
									goto l32
								l34:
									position, tokenIndex = position34, tokenIndex34
								}
								goto l31
							l32:
								position, tokenIndex = position32, tokenIndex32
							}
							if !matchDot() {
								goto l0
							}
							add(rulebigCodeText, position30)
						}
						if buffer[position] != rune('`') {
							goto l0
						}
						position++
						if buffer[position] != rune('`') {
							goto l0
						}
						position++
						if buffer[position] != rune('`') {
							goto l0
						}
						position++
						add(rulebigCodeBlock, position29)
					}
				}
			l4:
			l2:
				{
					position3, tokenIndex3 := position, tokenIndex
					{
						position35, tokenIndex35 := position, tokenIndex
						{
							position37 := position
							{
								position40, tokenIndex40 := position, tokenIndex
								{
									position41, tokenIndex41 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l42
									}
									position++
									goto l41
								l42:
									position, tokenIndex = position41, tokenIndex41
									if buffer[position] != rune('`') {
										goto l40
									}
									position++
								}
							l41:
								goto l36
							l40:
								position, tokenIndex = position40, tokenIndex40
							}
							if !matchDot() {
								goto l36
							}
						l38:
							{
								position39, tokenIndex39 := position, tokenIndex
								{
									position43, tokenIndex43 := position, tokenIndex
									{
										position44, tokenIndex44 := position, tokenIndex
										if buffer[position] != rune('*') {
											goto l45
										}
										position++
										goto l44
									l45:
										position, tokenIndex = position44, tokenIndex44
										if buffer[position] != rune('`') {
											goto l43
										}
										position++
									}
								l44:
									goto l39
								l43:
									position, tokenIndex = position43, tokenIndex43
								}
								if !matchDot() {
									goto l39
								}
								goto l38
							l39:
								position, tokenIndex = position39, tokenIndex39
							}
							add(ruleregularText, position37)
						}
						goto l35
					l36:
						position, tokenIndex = position35, tokenIndex35
						{
							position47 := position
							if buffer[position] != rune('*') {
								goto l46
							}
							position++
							{
								position48 := position
								{
									position51, tokenIndex51 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l51
									}
									position++
									goto l46
								l51:
									position, tokenIndex = position51, tokenIndex51
								}
								if !matchDot() {
									goto l46
								}
							l49:
								{
									position50, tokenIndex50 := position, tokenIndex
									{
										position52, tokenIndex52 := position, tokenIndex
										if buffer[position] != rune('*') {
											goto l52
										}
										position++
										goto l50
									l52:
										position, tokenIndex = position52, tokenIndex52
									}
									if !matchDot() {
										goto l50
									}
									goto l49
								l50:
									position, tokenIndex = position50, tokenIndex50
								}
								add(ruleboldText, position48)
							}
							if buffer[position] != rune('*') {
								goto l46
							}
							position++
							add(ruleboldBlock, position47)
						}
						goto l35
					l46:
						position, tokenIndex = position35, tokenIndex35
						{
							position54 := position
							if buffer[position] != rune('`') {
								goto l53
							}
							position++
							{
								position55 := position
								{
									position58, tokenIndex58 := position, tokenIndex
									if buffer[position] != rune('`') {
										goto l58
									}
									position++
									goto l53
								l58:
									position, tokenIndex = position58, tokenIndex58
								}
								if !matchDot() {
									goto l53
								}
							l56:
								{
									position57, tokenIndex57 := position, tokenIndex
									{
										position59, tokenIndex59 := position, tokenIndex
										if buffer[position] != rune('`') {
											goto l59
										}
										position++
										goto l57
									l59:
										position, tokenIndex = position59, tokenIndex59
									}
									if !matchDot() {
										goto l57
									}
									goto l56
								l57:
									position, tokenIndex = position57, tokenIndex57
								}
								add(rulecodeText, position55)
							}
							if buffer[position] != rune('`') {
								goto l53
							}
							position++
							add(rulecodeBlock, position54)
						}
						goto l35
					l53:
						position, tokenIndex = position35, tokenIndex35
						{
							position60 := position
							if buffer[position] != rune('`') {
								goto l3
							}
							position++
							if buffer[position] != rune('`') {
								goto l3
							}
							position++
							if buffer[position] != rune('`') {
								goto l3
							}
							position++
							{
								position61 := position
								if !matchDot() {
									goto l3
								}
								{
									position64, tokenIndex64 := position, tokenIndex
									if buffer[position] != rune('`') {
										goto l64
									}
									position++
									if buffer[position] != rune('`') {
										goto l64
									}
									position++
									if buffer[position] != rune('`') {
										goto l64
									}
									position++
									goto l3
								l64:
									position, tokenIndex = position64, tokenIndex64
								}
							l62:
								{
									position63, tokenIndex63 := position, tokenIndex
									if !matchDot() {
										goto l63
									}
									{
										position65, tokenIndex65 := position, tokenIndex
										if buffer[position] != rune('`') {
											goto l65
										}
										position++
										if buffer[position] != rune('`') {
											goto l65
										}
										position++
										if buffer[position] != rune('`') {
											goto l65
										}
										position++
										goto l63
									l65:
										position, tokenIndex = position65, tokenIndex65
									}
									goto l62
								l63:
									position, tokenIndex = position63, tokenIndex63
								}
								if !matchDot() {
									goto l3
								}
								add(rulebigCodeText, position61)
							}
							if buffer[position] != rune('`') {
								goto l3
							}
							position++
							if buffer[position] != rune('`') {
								goto l3
							}
							position++
							if buffer[position] != rune('`') {
								goto l3
							}
							position++
							add(rulebigCodeBlock, position60)
						}
					}
				l35:
					goto l2
				l3:
					position, tokenIndex = position3, tokenIndex3
				}
				{
					position66, tokenIndex66 := position, tokenIndex
					if !matchDot() {
						goto l66
					}
					goto l0
				l66:
					position, tokenIndex = position66, tokenIndex66
				}
				add(rulemd, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 regularText <- <(!('*' / '`') .)+> */
		nil,
		/* 2 boldBlock <- <('*' boldText '*')> */
		nil,
		/* 3 boldText <- <(!'*' .)+> */
		nil,
		/* 4 codeBlock <- <('`' codeText '`')> */
		nil,
		/* 5 codeText <- <(!'`' .)+> */
		nil,
		/* 6 bigCodeBlock <- <('`' '`' '`' bigCodeText ('`' '`' '`'))> */
		nil,
		/* 7 bigCodeText <- <((. !('`' '`' '`'))+ .)> */
		nil,
	}
	p.rules = _rules
	return nil
}
